
AVRASM ver. 2.1.30  C:\Users\alireza\Desktop\MicroprocessorLab\assignment3_lcd\problem 2\code\Debug\List\led2.asm Thu Dec 31 22:30:36 2020

C:\Users\alireza\Desktop\MicroprocessorLab\assignment3_lcd\problem 2\code\Debug\List\led2.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\alireza\Desktop\MicroprocessorLab\assignment3_lcd\problem 2\code\Debug\List\led2.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\alireza\Desktop\MicroprocessorLab\assignment3_lcd\problem 2\code\Debug\List\led2.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 6261
000034 6463
000035 6665
000036 6867      	.DB  0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68
000037 6a69
000038 6c6b
000039 6e6d
00003a 706f      	.DB  0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70
00003b 7271
00003c 7473
00003d 7877
00003e 7a79      	.DB  0x71,0x72,0x73,0x74,0x77,0x78,0x79,0x7A
C:\Users\alireza\Desktop\MicroprocessorLab\assignment3_lcd\problem 2\code\Debug\List\led2.asm(1131): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x0
                 _0x2020003:
000040 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000041 0002      	.DW  0x02
000042 0160      	.DW  __base_y_G101
000043 0080      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bffb      	OUT  GICR,R31
00004a bfeb      	OUT  GICR,R30
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000055 93ed      	ST   X+,R30
000056 9701      	SBIW R24,1
000057 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000058 e8e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000059 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005a 9185      	LPM  R24,Z+
00005b 9195      	LPM  R25,Z+
00005c 9700      	SBIW R24,0
00005d f061      	BREQ __GLOBAL_INI_END
00005e 91a5      	LPM  R26,Z+
00005f 91b5      	LPM  R27,Z+
000060 9005      	LPM  R0,Z+
000061 9015      	LPM  R1,Z+
000062 01bf      	MOVW R22,R30
000063 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000064 9005      	LPM  R0,Z+
000065 920d      	ST   X+,R0
000066 9701      	SBIW R24,1
000067 f7e1      	BRNE __GLOBAL_INI_LOOP
000068 01fb      	MOVW R30,R22
000069 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006b bfed      	OUT  SPL,R30
00006c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000070 940c 0072 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * led2.c
                 ; *
                 ; * Created: 12/31/2020 10:13:10 PM
                 ; * Author: Alireza Dizaji
                 ; */
                 ;
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega16.h>
                 ;#include <delay.h>
                 ;
                 ;#asm
                     .equ __lcd_port=0x18;
                 ; 0000 000E #endasm
                 ;#include <lcd.h>
                 ;
                 ;
                 ;void main(void){
                 ; 0000 0012 void main(void){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0013     int i;
                 ; 0000 0014     char buffer_alphabetic[] = "abcdefghijklmnopqrstwxyz";
                 ; 0000 0015     PORTB = 0x00;
000072 9769      	SBIW R28,25
000073 e189      	LDI  R24,25
000074 e0a0      	LDI  R26,LOW(0)
000075 e0b0      	LDI  R27,HIGH(0)
000076 e6e6      	LDI  R30,LOW(_0x3*2)
000077 e0f0      	LDI  R31,HIGH(_0x3*2)
000078 940e 01a2 	CALL __INITLOCB
                 ;	i -> R16,R17
                 ;	buffer_alphabetic -> Y+0
00007a e0e0      	LDI  R30,LOW(0)
00007b bbe8      	OUT  0x18,R30
                 ; 0000 0016     DDRB = 0x00;
00007c bbe7      	OUT  0x17,R30
                 ; 0000 0017 
                 ; 0000 0018     lcd_init(16);
00007d e1a0      	LDI  R26,LOW(16)
00007e 940e 0137 	CALL _lcd_init
                 ; 0000 0019     lcd_clear();
000080 940e 00f9 	CALL _lcd_clear
                 ; 0000 001A 
                 ; 0000 001B     while(1){
                 _0x4:
                 ; 0000 001C         for(i=0;i<28;i++){
                +
000082 e000     +LDI R16 , LOW ( 0 )
000083 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8:
                +
000084 310c     +CPI R16 , LOW ( 28 )
000085 e0e0     +LDI R30 , HIGH ( 28 )
000086 071e     +CPC R17 , R30
                 	__CPWRN 16,17,28
000087 f4ec      	BRGE _0x9
                 ; 0000 001D 
                 ; 0000 001E             if(i<15){
                +
000088 300f     +CPI R16 , LOW ( 15 )
000089 e0e0     +LDI R30 , HIGH ( 15 )
00008a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,15
00008b f41c      	BRGE _0xA
                 ; 0000 001F                  lcd_gotoxy(i,0);
00008c 930a      	ST   -Y,R16
00008d e0a0      	LDI  R26,LOW(0)
00008e c007      	RJMP _0xD
                 ; 0000 0020             }
                 ; 0000 0021             else{
                 _0xA:
                 ; 0000 0022                 lcd_gotoxy(i%15,1);
00008f 01d8      	MOVW R26,R16
000090 e0ef      	LDI  R30,LOW(15)
000091 e0f0      	LDI  R31,HIGH(15)
000092 940e 0194 	CALL __MODW21
000094 93ea      	ST   -Y,R30
000095 e0a1      	LDI  R26,LOW(1)
                 _0xD:
000096 940e 00e9 	CALL _lcd_gotoxy
                 ; 0000 0023             }
                 ; 0000 0024             lcd_putchar(buffer_alphabetic[i]);
000098 01de      	MOVW R26,R28
000099 0fa0      	ADD  R26,R16
00009a 1fb1      	ADC  R27,R17
00009b 91ac      	LD   R26,X
00009c 940e 010c 	CALL _lcd_putchar
                 ; 0000 0025             delay_ms(50);
00009e e3a2      	LDI  R26,LOW(50)
00009f e0b0      	LDI  R27,0
0000a0 940e 0173 	CALL _delay_ms
                 ; 0000 0026 
                 ; 0000 0027         }
                +
0000a2 5f0f     +SUBI R16 , LOW ( - 1 )
0000a3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000a4 cfdf      	RJMP _0x8
                 _0x9:
                 ; 0000 0028 
                 ; 0000 0029         lcd_clear();
0000a5 940e 00f9 	CALL _lcd_clear
                 ; 0000 002A     }
0000a7 cfda      	RJMP _0x4
                 ; 0000 002B 
                 ; 0000 002C }
                 _0xC:
0000a8 cfff      	RJMP _0xC
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
                 ; .FSTART __lcd_delay_G101
0000a9 e0ff          ldi   r31,15
                 __lcd_delay0:
0000aa 95fa          dec   r31
0000ab f7f1          brne  __lcd_delay0
0000ac 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
0000ad b3a7          in    r26,__lcd_direction
0000ae 70af          andi  r26,0xf                 ;set as input
0000af bba7          out   __lcd_direction,r26
0000b0 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0000b1 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0000b2 dff6      	RCALL __lcd_delay_G101
0000b3 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000b4 dff4      	RCALL __lcd_delay_G101
0000b5 b3a6          in    r26,__lcd_pin
0000b6 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000b7 dff1      	RCALL __lcd_delay_G101
0000b8 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000b9 dfef      	RCALL __lcd_delay_G101
0000ba 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000bb fda7          sbrc  r26,__lcd_busy_flag
0000bc cff5          rjmp  __lcd_busy
0000bd 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0000be 7fa0          andi  r26,0xf0
0000bf 2bab          or    r26,r27
0000c0 bba8          out   __lcd_port,r26          ;write
0000c1 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000c2 940e 00a9 	CALL __lcd_delay_G101
0000c4 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000c5 940e 00a9 	CALL __lcd_delay_G101
0000c7 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000c8 93aa      	ST   -Y,R26
0000c9 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0000ca b3a7          in    r26,__lcd_direction
0000cb 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0000cc bba7          out   __lcd_direction,r26
0000cd b3b8          in    r27,__lcd_port
0000ce 70bf          andi  r27,0xf
0000cf 81a8          ld    r26,y
0000d0 dfed      	RCALL __lcd_write_nibble_G101
0000d1 81a8          ld    r26,y
0000d2 95a2          swap  r26
0000d3 dfea      	RCALL __lcd_write_nibble_G101
0000d4 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0000d5 940c 0168 	JMP  _0x2080001
                 ; .FEND
                 __lcd_read_nibble_G101:
                 ; .FSTART __lcd_read_nibble_G101
0000d7 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000d8 940e 00a9 	CALL __lcd_delay_G101
0000da b3e6          in    r30,__lcd_pin           ;read
0000db 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000dc 940e 00a9 	CALL __lcd_delay_G101
0000de 7fe0          andi  r30,0xf0
0000df 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G101:
                 ; .FSTART _lcd_read_byte0_G101
0000e0 940e 00a9 	CALL __lcd_delay_G101
0000e2 dff4      	RCALL __lcd_read_nibble_G101
0000e3 2fae          mov   r26,r30
0000e4 dff2      	RCALL __lcd_read_nibble_G101
0000e5 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
0000e6 95e2          swap  r30
0000e7 2bea          or    r30,r26
0000e8 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000e9 93aa      	ST   -Y,R26
0000ea 940e 00ad 	CALL __lcd_ready
0000ec 81e8      	LD   R30,Y
0000ed e0f0      	LDI  R31,0
0000ee 5ae0      	SUBI R30,LOW(-__base_y_G101)
0000ef 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0000f0 81e0      	LD   R30,Z
0000f1 81a9      	LDD  R26,Y+1
0000f2 0fae      	ADD  R26,R30
0000f3 940e 00c8 	CALL __lcd_write_data
0000f5 8059      	LDD  R5,Y+1
0000f6 8048      	LDD  R4,Y+0
0000f7 9622      	ADIW R28,2
0000f8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000f9 940e 00ad 	CALL __lcd_ready
0000fb e0a2      	LDI  R26,LOW(2)
0000fc 940e 00c8 	CALL __lcd_write_data
0000fe 940e 00ad 	CALL __lcd_ready
000100 e0ac      	LDI  R26,LOW(12)
000101 940e 00c8 	CALL __lcd_write_data
000103 940e 00ad 	CALL __lcd_ready
000105 e0a1      	LDI  R26,LOW(1)
000106 940e 00c8 	CALL __lcd_write_data
000108 e0e0      	LDI  R30,LOW(0)
000109 2e4e      	MOV  R4,R30
00010a 2e5e      	MOV  R5,R30
00010b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00010c 93aa      	ST   -Y,R26
00010d 93ef          push r30
00010e 93ff          push r31
00010f 81a8          ld   r26,y
000110 9468          set
000111 30aa          cpi  r26,10
000112 f019          breq __lcd_putchar1
000113 94e8          clt
000114 1457      	CP   R5,R7
000115 f030      	BRLO _0x2020004
                 	__lcd_putchar1:
000116 9443      	INC  R4
000117 e0e0      	LDI  R30,LOW(0)
000118 93ea      	ST   -Y,R30
000119 2da4      	MOV  R26,R4
00011a dfce      	RCALL _lcd_gotoxy
00011b f036      	brts __lcd_putchar0
                 _0x2020004:
00011c 9453      	INC  R5
00011d df8f          rcall __lcd_ready
00011e 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
00011f 81a8      	LD   R26,Y
000120 940e 00c8 	CALL __lcd_write_data
                 __lcd_putchar0:
000122 91ff          pop  r31
000123 91ef          pop  r30
000124 940c 0168 	JMP  _0x2080001
                 ; .FEND
                 __long_delay_G101:
                 ; .FSTART __long_delay_G101
000126 27aa          clr   r26
000127 27bb          clr   r27
                 __long_delay0:
000128 9711          sbiw  r26,1         ;2 cycles
000129 f7f1          brne  __long_delay0 ;2 cycles
00012a 9508      	RET
                 ; .FEND
                 __lcd_init_write_G101:
                 ; .FSTART __lcd_init_write_G101
00012b 93aa      	ST   -Y,R26
00012c 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00012d b3a7          in    r26,__lcd_direction
00012e 6fa7          ori   r26,0xf7                ;set as output
00012f bba7          out   __lcd_direction,r26
000130 b3b8          in    r27,__lcd_port
000131 70bf          andi  r27,0xf
000132 81a8          ld    r26,y
000133 940e 00be 	CALL __lcd_write_nibble_G101
000135 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000136 c031      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000137 93aa      	ST   -Y,R26
000138 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000139 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
00013a 8078      	LDD  R7,Y+0
00013b 81e8      	LD   R30,Y
00013c 58e0      	SUBI R30,-LOW(128)
                +
00013d 93e0 0162+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00013f 81e8      	LD   R30,Y
000140 54e0      	SUBI R30,-LOW(192)
                +
000141 93e0 0163+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000143 940e 016a 	CALL SUBOPT_0x0
000145 940e 016a 	CALL SUBOPT_0x0
000147 940e 016a 	CALL SUBOPT_0x0
000149 dfdc      	RCALL __long_delay_G101
00014a e2a0      	LDI  R26,LOW(32)
00014b dfdf      	RCALL __lcd_init_write_G101
00014c dfd9      	RCALL __long_delay_G101
00014d e2a8      	LDI  R26,LOW(40)
00014e 940e 016f 	CALL SUBOPT_0x1
000150 e0a4      	LDI  R26,LOW(4)
000151 940e 016f 	CALL SUBOPT_0x1
000153 e8a5      	LDI  R26,LOW(133)
000154 940e 016f 	CALL SUBOPT_0x1
000156 b3a7          in    r26,__lcd_direction
000157 70af          andi  r26,0xf                 ;set as input
000158 bba7          out   __lcd_direction,r26
000159 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
00015a 940e 00e0 	CALL _lcd_read_byte0_G101
00015c 30e5      	CPI  R30,LOW(0x5)
00015d f011      	BREQ _0x202000B
00015e e0e0      	LDI  R30,LOW(0)
00015f c008      	RJMP _0x2080001
                 _0x202000B:
000160 940e 00ad 	CALL __lcd_ready
000162 e0a6      	LDI  R26,LOW(6)
000163 940e 00c8 	CALL __lcd_write_data
000165 940e 00f9 	CALL _lcd_clear
000167 e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
000168 9621      	ADIW R28,1
000169 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00016a 940e 0126 	CALL __long_delay_G101
00016c e3a0      	LDI  R26,LOW(48)
00016d 940c 012b 	JMP  __lcd_init_write_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00016f 940e 00c8 	CALL __lcd_write_data
000171 940c 0126 	JMP  __long_delay_G101
                 
                 
                 	.CSEG
                 _delay_ms:
000173 9610      	adiw r26,0
000174 f039      	breq __delay_ms1
                 __delay_ms0:
000175 95a8      	wdr
                +
000176 eb88     +LDI R24 , LOW ( 0xBB8 )
000177 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
000178 9701     +SBIW R24 , 1
000179 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
00017a 9711      	sbiw r26,1
00017b f7c9      	brne __delay_ms0
                 __delay_ms1:
00017c 9508      	ret
                 
                 __ANEGW1:
00017d 95f1      	NEG  R31
00017e 95e1      	NEG  R30
00017f 40f0      	SBCI R31,0
000180 9508      	RET
                 
                 __DIVW21U:
000181 2400      	CLR  R0
000182 2411      	CLR  R1
000183 e190      	LDI  R25,16
                 __DIVW21U1:
000184 0faa      	LSL  R26
000185 1fbb      	ROL  R27
000186 1c00      	ROL  R0
000187 1c11      	ROL  R1
000188 1a0e      	SUB  R0,R30
000189 0a1f      	SBC  R1,R31
00018a f418      	BRCC __DIVW21U2
00018b 0e0e      	ADD  R0,R30
00018c 1e1f      	ADC  R1,R31
00018d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00018e 60a1      	SBR  R26,1
                 __DIVW21U3:
00018f 959a      	DEC  R25
000190 f799      	BRNE __DIVW21U1
000191 01fd      	MOVW R30,R26
000192 01d0      	MOVW R26,R0
000193 9508      	RET
                 
                 __MODW21:
000194 94e8      	CLT
000195 ffb7      	SBRS R27,7
000196 c004      	RJMP __MODW211
000197 95a0      	COM  R26
000198 95b0      	COM  R27
000199 9611      	ADIW R26,1
00019a 9468      	SET
                 __MODW211:
00019b fdf7      	SBRC R31,7
00019c dfe0      	RCALL __ANEGW1
00019d dfe3      	RCALL __DIVW21U
00019e 01fd      	MOVW R30,R26
00019f f40e      	BRTC __MODW212
0001a0 dfdc      	RCALL __ANEGW1
                 __MODW212:
0001a1 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0001a2 0fac      	ADD  R26,R28
0001a3 1fbd      	ADC  R27,R29
                 __INITLOC0:
0001a4 9005      	LPM  R0,Z+
0001a5 920d      	ST   X+,R0
0001a6 958a      	DEC  R24
0001a7 f7e1      	BRNE __INITLOC0
0001a8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:   5 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  11 r25:   5 r26:  67 r27:  15 r28:   6 r29:   2 r30:  54 r31:  16 
x  :   5 y  :  20 z  :   9 
Registers used: 19 out of 35 (54.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   4 
adiw  :   4 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   9 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  35 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   2 
cp    :   1 cpc   :   2 cpi   :   4 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   2 jmp   :  26 ld    :  10 ldd   :   4 ldi   :  47 
lds   :   0 lpm   :   8 lsl   :   1 lsr   :   0 mov   :   4 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   2 out   :  13 pop   :   2 push  :   2 rcall :  16 ret   :  14 
reti  :   0 rjmp  :  10 rol   :   3 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   2 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  12 std   :   0 sts   :   2 sub   :   1 subi  :   4 swap  :   2 
tst   :   0 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000352    796     54    850   16384   5.2%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
